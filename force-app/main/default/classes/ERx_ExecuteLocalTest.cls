@isTest private class ERx_ExecuteLocalTest {static testMethod void ERx_ExecuteLocal_Coverage() {    EnrollmentrxRx__Enrollment_Opportunity__c  app = new EnrollmentrxRx__Enrollment_Opportunity__c (EnrollmentrxRx__Admissions_Status__c = 'New'); insert app;List<EnrollmentrxRx__Test_Score__c > lstAcc = new List<EnrollmentrxRx__Test_Score__c >();lstAcc.add(new EnrollmentrxRx__Test_Score__c(EnrollmentrxRx__Application__c =app.id));lstAcc.add(new EnrollmentrxRx__Test_Score__c(EnrollmentrxRx__Application__c =app.id));insert lstAcc;try{ Set<Id> ids = new Set<Id>{lstAcc[0].Id, lstAcc[1].Id};Map<String, Object> args = new Map<String, Object>();args.put('query',(object)'SELECT count() FROM EnrollmentrxRx__Test_Score__c');args.put('queryTarget','EnrollmentrxRx__Test_Score__c');args.put('sobjects', lstAcc);args.put('dmlType', (object)'IS_UPDATE');args.put('sobj', lstAcc[0]);args.put('fieldName', 'EnrollmentrxRx__Application__r');Type t = Type.forName('','ERx_ExecuteLocal');Callable obj = (Callable)t.newInstance();obj.call('executeLocalCountQuery', args);args.put('query',(object)'Select Id,EnrollmentrxRx__Application__r.Name From EnrollmentrxRx__Test_Score__c Limit 2');obj.call('executeLocalQuery', args);obj.call('executeLocalDML', args);obj.call('executeLocalGetSObject', args);args.put('fieldName', 'EnrollmentrxRx__Test_Type__c');args.put('fieldValue', 'SAT');obj.call('executeLocalGet' , args); obj.call('executeLocalPut', args); }catch(Exception e){ system.assert(false, e + '-' + e.getStackTraceString());}}}