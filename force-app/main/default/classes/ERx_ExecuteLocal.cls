global without sharing class ERx_ExecuteLocal implements Callable { List<SObject> executeLocalQuery(String query,Object queryTarget) { try{return Database.query(query);}catch(Exception e){if(e.getMessage().containsIgnoreCase('secure query included inaccessible field')){query = query.replace(' WITH SECURITY_ENFORCED ', ' ');List<SObject> recordListNew =  Database.query(query);SObjectAccessDecision decision = Security.stripInaccessible(AccessType.READABLE,recordListNew);System.debug('******* FIELDS REMOVED *******');System.debug('Records returned after secureity check removed : ' + recordListNew);System.debug('SObjectAccessDecision Record : ' + decision);throw new ErxLocalException('Some field permissions are missing : ' + decision.getRemovedFields());}else { throw new ErxLocalException('Error occured while querying data: '+e.getMessage()); }}} Integer executeLocalCountQuery(String query,Object queryTarget) { try{return Database.countQuery(query);}catch(Exception e){if(e.getMessage().containsIgnoreCase('secure query included inaccessible field')){query = query.replace(' WITH SECURITY_ENFORCED ', ' ');List<SObject> recordListNew =  Database.query(query);SObjectAccessDecision decision = Security.stripInaccessible(AccessType.READABLE,recordListNew);System.debug('******* FIELDS REMOVED *******');System.debug('Records returned after secureity check removed : ' + recordListNew);System.debug('SObjectAccessDecision Record : ' + decision);throw new ErxLocalException('Some field permissions are missing : ' + decision.getRemovedFields());}else { throw new ErxLocalException('Error occured while querying data: '+e.getMessage()); }}} void executeLocalDML (List<SObject> sobjects, String dmlType){ if(dmlType == 'IS_INSERT'){ insert sobjects; } else if(dmlType == 'IS_UPDATE'){ update sobjects; } else if( dmlType == 'IS_DELETE'){ delete sobjects; } } SObject executeLocalGetSObject(SObject sobj,String fieldName) { return sobj.getSObject(fieldName); } List<SObject> executeLocalGetSObjects(SObject sobj,String fieldName) { return sobj.getSObjects(fieldName); } Object executeLocalGet(SObject sobj,String fieldName) { return sobj.get(fieldName); } void executeLocalPut(SObject sobj,String fieldName,Object fieldValue) { sobj.put(fieldName,fieldValue); } public Object call(String action, Map<String, Object> args) { switch on action { when 'executeLocalQuery' { return this.executeLocalQuery((String)args.get('query'),args.get('queryTarget')); } when 'executeLocalCountQuery' { return this.executeLocalCountQuery((String)args.get('query'),args.get('queryTarget')); } when 'executeLocalDML' { this.executeLocalDML((SObject[])args.get('sobjects'),(String)args.get('dmlType')); return null; } when 'executeLocalGetSObject' { return this.executeLocalGetSObject((SObject)args.get('sobj'),(String)args.get('fieldName')); } when 'executeLocalGetSObjects' { return this.executeLocalGetSObjects((SObject)args.get('sobj'),(String)args.get('fieldName')); } when 'executeLocalGet' { return this.executeLocalGet((SObject)args.get('sobj'),(String)args.get('fieldName')); } when 'executeLocalPut' { this.executeLocalPut((SObject)args.get('sobj'),(String)args.get('fieldName'),args.get('fieldValue')); return null; } when else{ return null; } } } public class ErxLocalException extends Exception {}}